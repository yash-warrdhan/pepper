name: Security Check

on:
  push:
  workflow_dispatch:

jobs:
  secret_scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          sudo apt-get install -y diffutils jq python3 python3-pip
          python -m pip install detect-secrets
          python3 -m pip install tabulate
          python -m pip install --upgrade pip
          
          
      - name: Set MAGICK_HOME to prevent ImageMagick error
        run: |
          export MAGICK_HOME=""

      - name: Run Detect Secrets Scan
        run: |
          detect-secrets scan --only-verified --exclude-files '\.git/.*' --exclude-files '\.gitmodules' >> detect_secrets_output.txt

      - name: Parse Detect Secrets Output
        id: parse_output
        run: |
          import json
          import sys
          from tabulate import tabulate
          from datetime import datetime

          def save_table_to_file(table, file_name):
              with open(file_name, 'w') as file:
                  file.write(table)

          with open("detect_secrets_output.txt", "r") as file:
              data = file.read()

          
          table = []  # Initialize an empty table
          table_headers = ["Secret Type", "File", "Hashed Secret", "Line Number"]
          for file, secrets in data_json["results"].items():
              for secret in secrets:
                  if not isinstance(secret, dict):
                      continue
                  secret_type = secret.get("type", "NA")
                  filename = secret.get("filename", "NA")
                  hashed_secret = secret.get("hashed_secret", "NA")
                  line_number = secret.get("line_number", "NA")
                  row = [secret_type, filename, hashed_secret, line_number]
                  table.append(row)

          # Generate the table
          table_output = tabulate(table, headers=table_headers, tablefmt='grid')

          # Print the table
          print(table_output)

          # Get the current date and time
          current_date_time = datetime.now().strftime("%Y%m%d_%H%M%S")

          # Specify the file name using the naming convention
          file_name = f"Detect_secret_{current_date_time}.txt"

          # Save the table to the file
          save_table_to_file(table_output, file_name)

          print(f"Table saved to file: {file_name}")

      - name: Upload Detect Secrets Output to GCS
        uses: google-github-actions/upload-cloud-storage@main
        with:
          args: upload detect_secret*.txt cicdpipelinee/Detect_secret/
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCS_SA_KEY }}

  Bandit:
    name: Bandit Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          pip install tabulate

      - name: Security check - Bandit
        run: |
          bandit -r . > bandit_report.txt || true

      - name: Parse Bandit report
        id: parse_bandit_report
        run: |
          import re
          import sys
          import json
          import os
          from tabulate import tabulate
          from datetime import datetime

          def save_table_to_file(table, file_name):
              with open(file_name, 'w') as file:
                  file.write(table)

          # Specify the file path
          file_path = 'bandit_report.txt'
          # To store the table rows
          table_rows = []
          # Open and read the file
          with open(file_path, 'r') as file:
              issue, severity, cwe, location = "", "", "", ""
              collecting_info = False
              for line in file:
                  if 'Issue' in line:
                      issue = line.split(': ')[1].strip()
                  elif 'Severity' in line:
                      severity = line.split(': ')[1].strip().split(' ')[0]  # Take only severity, exclude 'Confidence'
                  elif 'CWE' in line:
                      cwe = line.split(': ')[1].strip()
                  elif 'Location' in line:
                      location = line.split(': ')[1].strip()
                      collecting_info = True  # Start collecting info after 'Location'
                  elif '---------------------------' in line:
                      collecting_info = False  # Stop collecting info when encountering the delimiter
                      # Assuming this is the end of the current issue, so we add the row to the list of rows and reset the variables for the next issue.
                      table_rows.append([issue, severity, cwe, location])
                      issue, severity, cwe, location = "", "", "", ""
                  elif collecting_info:
                      # Append all additional lines of information to the "Location" for the current issue
                      location += "\n" + line.strip()

          # Convert to JSON
          json_data = json.dumps(table_rows)
          # Parse JSON
          parsed_json = json.loads(json_data)
          # Custom sort function
          severity_order = {'High': 0, 'Medium': 1, 'Low': 2}
          # Sort the rows
          sorted_rows = sorted(parsed_json, key=lambda x: severity_order[x[1]])
          # Specify the table headers
          table_headers = ["Issue", "Severity", "CWE", "Location"]

          # Generate the table
          table_output = tabulate(sorted_rows, headers=table_headers, tablefmt='grid')

          # Print the table
          print(table_output)

          # Get the current date and time
          current_date_time = datetime.now().strftime("%Y%m%d_%H%M%S")

          # Specify the file name using the naming convention
          file_name = f"Bandit_result_{current_date_time}.txt"

          # Save the table to the file
          save_table_to_file(table_output, file_name)

          print(f"Table saved to file: {file_name}")

      - name: Upload Bandit Report to GCS
        uses: google-github-actions/upload-cloud-storage@main
        with:
          args: upload Bandit_result*.txt cicdpipelinee/Bandit_result/
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCS_SA_KEY }}
