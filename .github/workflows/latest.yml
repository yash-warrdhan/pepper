name: Ban

on:
  push:
    branches:
      - master

jobs:
  Bandit:
    name: Bandit Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          pip install tabulate
          pip install textwrap3

      - name: Security check - Bandit
        run: |
          bandit -r . > bandit_report.txt || true

      - name: Parse Bandit report
        run: |
          import re
          import json
          import textwrap
          from tabulate import tabulate
          from textwrap3 import TextWrapper

          # Read the Bandit report file
          with open('bandit_report.txt', 'r') as file:
              file_contents = file.readlines()

          # To store the table rows
          table_rows = []

          issue, severity, cwe, location = "", "", "", ""
          lines_before_issue = []  # Variable to store the lines before the next issue

          for line in file_contents:
              line = line.strip()  # Remove leading/trailing whitespace

              if line.startswith("Code scanned:"):
                  break  # Stop parsing after "Code scanned:"

              if 'Issue' in line:
                  if issue != "":
                      # Add the lines before the next issue to the table row
                      table_rows.append([issue, severity, cwe, '\n'.join(lines_before_issue)])
                  issue = textwrap.fill(line.split(': ')[1].strip(), width=30)
                  lines_before_issue = []  # Reset lines_before_issue for the next issue
              elif 'Severity' in line:
                  severity = line.split(': ')[1].strip().split(' ')[0]  # Take only severity, exclude 'Confidence'
              elif 'CWE' in line:
                  cwe = textwrap.fill(line.split(': ')[1].strip(), width=30)  # Capture everything after "CWE:"
              else:
                  lines_before_issue.append(line.strip())  # Collect lines under the same location

          # Add the last issue to the table row
          table_rows.append([issue, severity, cwe, '\n'.join(lines_before_issue)])

          # Wrap the text in the "Location" column
          wrapper = TextWrapper(width=80, subsequent_indent=' ' * 10)
          wrapped_rows = [[issue, severity, cwe, '\n'.join(wrapper.wrap(location))] for issue, severity, cwe, location in table_rows]

          # Custom sort function
          severity_order = {'High': 0, 'Medium': 1, 'Low': 2}

          # Sort the rows
          sorted_rows = sorted(wrapped_rows, key=lambda x: severity_order[x[1]])

          # Specify the table headers
          table_headers = ["Issue", "Severity", "CWE", "Location"]

          # Print the table
          print(tabulate(sorted_rows, headers=table_headers, tablefmt='grid'))

        shell: python
